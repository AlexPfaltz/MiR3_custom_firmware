#
# https://github.com/P3TERX/Actions-OpenWrt
#
# File: .github/workflows/openwrt-bulder.yml
# Description: Build OpenWrt using GitHub Actions
#
# Copyright (c) 2019-2024 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

name: OpenWrt 24.10.0 (Stable) Builder

on:
  repository_dispatch:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/openwrt/openwrt
  PATCH_FILE: openwrt-24.10.0-mir3.patch
  TZ: Asia/Novosibirsk

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses-dev libssl-dev python3-distutils python3-setuptools rsync swig unzip zlib1g-dev file wget
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Select and switch to v24.10.0
      run: cd openwrt && git checkout v24.10.0

    - name: Downloading feeds from the official openwrt release for mt7620
      run: |
       cd openwrt
       rm -rf feeds.conf.default
       wget https://downloads.openwrt.org/releases/24.10.0/targets/ramips/mt7620/feeds.buildinfo -O feeds.conf.default
       echo 'src-git x https://github.com/x-wrt/com.x-wrt.git' >> feeds.conf.default

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load config
      run: cd openwrt && wget https://downloads.openwrt.org/releases/24.10.0/targets/ramips/mt7620/config.buildinfo -O .config

    - name: Apply patch
      run: |
        [ -e $PATCH_FILE ] && mv $PATCH_FILE openwrt/$PATCH_FILE
        cd openwrt
        git apply --check $PATCH_FILE
        git apply $PATCH_FILE
        git status -s

    - name: Changing the config for MIR3
      run: |
        cd openwrt
        sed -i '/CONFIG_TARGET_MULTI_PROFILE/d' .config
        sed -i '/CONFIG_TARGET_ALL_PROFILES/d' .config
        sed -i '/CONFIG_TARGET_PER_DEVICE_ROOTFS/d' .config
        sed -i '/CONFIG_TARGET_DEVICE_/d' .config
        echo 'CONFIG_TARGET_ramips_mt7620_DEVICE_xiaomi_mi-router-3=y
        CONFIG_TARGET_PROFILE="DEVICE_xiaomi_miwifi-r3"
        CONFIG_PACKAGE_ca-certificates=y
        CONFIG_PACKAGE_luci-i18n-base-ru=y
        CONFIG_PACKAGE_base-config-setting=y
        CONFIG_BASE_CONFIG_SETTING_LUCI_LOGIN="root"' >> .config
        make defconfig
        sed -i 's/CCONFIG_MAKE_TOOLCHAIN=y/# CONFIG_MAKE_TOOLCHAIN is not set/g' .config
        sed -i 's/CONFIG_SDK=y/# CONFIG_SDK is not set/g' .config
        sed -i 's/CONFIG_SDK_LLVM_BPF=y/# CONFIG_SDK_LLVM_BPF is not set/g' .config
        sed -i 's/CONFIG_HAS_BPF_TOOLCHAIN=y/# CONFIG_HAS_BPF_TOOLCHAIN is not set/g' .config
        sed -i 's/CONFIG_BPF_TOOLCHAIN_BUILD_LLVM=y/# CONFIG_BPF_TOOLCHAIN_BUILD_LLVM is not set/g' .config

    - name: Download package
      id: package
      run: |
        cd openwrt
        wget https://downloads.openwrt.org/releases/24.10.0/targets/ramips/mt7620/llvm-bpf-18.1.7.Linux-x86_64.tar.zst
        tar -xvaf llvm-bpf-18.1.7.Linux-x86_64.tar.zst
        make download

    - name: Read config target
      run: |
        cd openwrt
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/^CONFIG_TARGET_(.*)_(.*)_DEVICE_(.*)=y/\1/' > ARCH_NAME
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/^CONFIG_TARGET_(.*)_(.*)_DEVICE_(.*)=y/\2/' > CPU_NAME
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/^CONFIG_TARGET_(.*)_(.*)_DEVICE_(.*)=y/\3/' > DEVICE_NAME
        [ -s ARCH_NAME ] && echo "ARCH_NAME=$(cat ARCH_NAME)" >> $GITHUB_ENV
        [ -s CPU_NAME ] && echo "CPU_NAME=$(cat CPU_NAME)" >> $GITHUB_ENV
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo -e "Arch: $(cat ARCH_NAME)\nCPU: $(cat CPU_NAME)\nDevice: $(cat DEVICE_NAME)"

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Organize files
      id: organize
      run: |
        cd openwrt/bin/targets/*/*
        tar -czvf Packages.tar.gz packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success'
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Generate release tag
      id: tag
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        echo -e "Arch: $(cat ARCH_NAME)\nCPU: $(cat CPU_NAME)\nDevice: $(cat DEVICE_NAME)" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to release
      uses: softprops/action-gh-release@master
      if: steps.tag.outputs.status == 'success'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        name: 'OpenWRT 24.10.0'
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 0
        keep_minimum_runs: 2
